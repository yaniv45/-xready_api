import { createClient } from '@supabase/supabase-js';
import { Configuration, OpenAIApi } from 'openai';
import path from 'path';
import { promises as fs } from 'fs';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_KEY
);

const openai = new OpenAIApi(new Configuration({
  apiKey: process.env.OPENAI_API_KEY
}));

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).end();

  const { user_id } = req.body;
  if (!user_id) return res.status(400).json({ error: 'Missing user_id' });

  // 1. טען את התורה (guidelines) מתוך קובץ JSON
  const filePath = path.join(process.cwd(), 'data', 'guidelines.json');
  const fileContents = await fs.readFile(filePath, 'utf8');
  const guidelines = JSON.parse(fileContents);

  const guidelineMap = {};
  guidelines.forEach(({ question, guideline }) => {
    guidelineMap[question.trim()] = guideline.trim();
  });

  // 2. שלוף תשובות מהמשתמש
  const { data, error } = await supabase
    .from('answers')
    .select('*')
    .eq('user_id', user_id);

  if (error || !data) {
    console.error('Supabase error:', error);
    return res.status(500).json({ error: 'Failed to fetch answers' });
  }

  // 3. הנחיות כלליות ל-GPT
  const baseInstructions = `
אתה מנתח שאלון מוכנות לחירום של רשות מקומית בישראל.

לכל שאלה יש:
- נושא (תחום)
- ניסוח השאלה
- דגש לבדיקה (מה נחשב מוכן/לא)
- תשובת הרשות (כן/לא/חלקית)
- ציון מקסימלי לשאלה

משמעות התשובות:
- "כן" = הרשות עומדת בדרישה
- "חלקית" = קיימת פעילות אך נדרשים שיפורים
- "לא" = אין מענה מספק

המטרה שלך:
- לנתח כל תחום (נושא) בקצרה
- להציג במה הרשות חזקה ובמה יש חולשות
- להציע 2 צעדים ממוקדים לשיפור לכל תחום
- אל תסכם כל שאלה — רק את התחום לפי כל השאלות בו

שפה: עברית ברורה, מקצועית וללא כותרות מיותרות.
`;

  // 4. נבנה פרומט חכם לפי כל שאלה
  const answersFormatted = data.map((row) => {
    const guideline = guidelineMap[row.question_text?.trim()] || 'לא צויין דגש';
    return `נושא: ${row.category}
שאלה: ${row.question_text}
דגש: ${guideline}
תשובה: ${row.answer}
ציון מקסימלי: ${row.max_score}`;
  }).join('\n\n');

  const fullPrompt = `${baseInstructions}\n\n${answersFormatted}`;

  // 5. פנייה ל־GPT
  try {
    const gptResponse = await openai.createChatCompletion({
      model: 'gpt-4',
      messages: [{ role: 'user', content: fullPrompt }],
    });

    const summary = gptResponse?.data?.choices?.[0]?.message?.content || 'אין ניתוח זמין';
    res.status(200).json({ summary });

  } catch (err) {
    console.error('GPT error:', err);
    res.status(500).json({ error: 'GPT failed' });
  }
}
